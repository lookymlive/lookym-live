# LOOKYM Project Intelligence

## Supabase Schema (`sql/schema.sql`)

* **Source of Truth:** Single `sql/schema.sql` file defines all tables, functions, views, triggers, and RLS policies.
* **User Profiles:** `public.users` table stores profile info, linked to `auth.users` via a foreign key (id).
* **Signup Trigger:** `handle_new_user()` function (triggered by `on_auth_user_created` on `auth.users`) automatically creates a profile in `public.users`. **Crucially requires client-side signup to pass `username` and `role` in `options.data`.** Must be defined with `SECURITY DEFINER` to have permissions to insert into `public.users`.
* **Key Tables:**
  * `users`: Profiles (user/business roles).
  * `videos`: Video metadata (linked to users).
  * `comments`: Video comments (linked to videos, users).
  * `video_likes`: Tracks user likes on videos.
  * `saved_videos`: Tracks user saved videos.
  * `followers`: User follow relationships.
  * `chats`: Chat conversations.
  * `chat_participants`: Links users to chats.
  * `messages`: Individual chat messages.
  * `notifications`: User notifications.
* **Denormalization:** `videos.likes` count is denormalized, managed by `increment_video_likes` / `decrement_video_likes` functions (intended for RPC calls or potential triggers).
* **Timestamp Updates:** `update_updated_at()` trigger automatically updates `updated_at` columns on relevant tables.
* **RLS:** Enabled on all tables. Policies generally allow public reads where appropriate, owner modifications, and participant access for chat-related tables. RLS for chat/notification *creation* might need refinement.
* **Views:** `video_feed` provides a joined view of videos and user details for feed display.

## Memory Bank

* **Structure:** Follows the standard structure (`projectbrief.md`, `productContext.md`, etc.).
* **Updates:** Keep documentation updated, especially `activeContext.md` and `progress.md`, after significant changes or task completion.

## Environment Variables

* Use `.env` file.
* Prefix client-accessible variables with `EXPO_PUBLIC_`.
* Key vars:
  * `EXPO_PUBLIC_SUPABASE_URL`, `EXPO_PUBLIC_SUPABASE_ANON_KEY`
  * `EXPO_PUBLIC_CLOUDINARY_CLOUD_NAME`, `EXPO_PUBLIC_CLOUDINARY_UPLOAD_PRESET`
  * (Potentially Google OAuth keys)

## Video Handling

* **Preview/Playback:** Use `expo-video` (`VideoView` component). Migrated from deprecated `expo-av` (`Video`) due to rendering issues in Expo Go.
* **Selection:** Use `expo-image-picker` (`launchImageLibraryAsync` with `mediaTypes: ['videos']`).
* **Recording:** Use `expo-image-picker` (`launchCameraAsync` with `mediaTypes: ['videos']`).
* **Upload:** Direct client-side upload to Cloudinary using `fetch` and an *unsigned* upload preset. Implemented in `utils/cloudinary.ts` with functions:
  * `uploadVideoToCloudinary`: Primary function for direct uploads.
  * `buildCloudinaryFormData`: Helper for creating appropriate FormData objects.
  * Progress tracking implemented using XMLHttpRequest when available.
* **Store Integration:** Video state managed through `useVideoStore` (Zustand), which handles:
  * Cloudinary upload via `uploadVideo` function.
  * Supabase metadata storage after successful upload.
  * Video loading/fetching for feed and profile displays.
  * Interactions (likes, comments, saves).
* **User Restrictions:** Only users with "business" role can upload videos (checked in `upload.tsx`).
* **Video Metadata:** After Cloudinary upload, video details (URL, caption, hashtags) are stored in Supabase `videos` table with relationship to user.

## File Structure Patterns

* **App Screens:** `/app` for all screens using Expo Router (file-based routing)
* **Components:** `/components` for reusable UI components
* **Utils:** `/utils` for service clients and helper functions
* **Types:** `/types` for TypeScript definitions
* **State Management:** `/store` for Zustand stores
* **Database Schema:** `sql/schema.sql` contains all database definitions

## Naming & Coding Conventions

* **Components:**
  * PascalCase for component files and names
  * TypeScript for all components with proper typing
  * Props interfaces defined with `[ComponentName]Props` naming
  * Functional components with React.FC typing

* **Hooks:**
  * camelCase prefixed with `use`
  * Always explicitly type return values

* **State Stores:**
  * Named with pattern `use[Domain]Store`
  * Keep slices of state in separate stores (auth, video, chat)
  * Use Zustand persist middleware for stores requiring persistence

* **Styling:**
  * React Native StyleSheet objects
  * No inline styles except for very simple or dynamic styling
  * Colors from theme object for consistency

## Project-Specific Patterns

* **Authentication:**
  * Supabase Auth for user management
  * User/Business role distinction
  * Role check in routes requiring specific access
  * Session persistence with AsyncStorage

* **Video System:**
  * `expo-video` for playback/preview (migrated from `expo-av`)
  * `expo-image-picker` for selection/recording
  * Direct upload to Cloudinary via fetch API
  * Pass `caption` and `hashtags` when saving to Supabase

* **Navigation:**
  * File-based routing with Expo Router
  * Protected routes via layout groups
  * Tab navigation in `app/(tabs)` directory
  * Modal screens in `app/modal.tsx`

* **API Calls:**
  * Supabase client initialized in `utils/supabase.ts`
  * Cloudinary utilities in `utils/cloudinary.ts`
  * Environment variables with `EXPO_PUBLIC_` prefix for client access

## Known Challenges

* `react-native-url-polyfill` bundling errors
* Video performance optimization, especially on slower connections
* Web video playback experience requires improvements
* Chat message ordering and realtime issues

## Documentation Practices

* Update `memory-bank` files when implementing significant features
* Keep `activeContext.md` and `progress.md` current
* Use Spanish for user-facing documentation, English for technical docs
